#include <matrixlib/GaussElimination.h>




int main( int argc, char *argv[] )
{
	//##################################################################//
	//####################### 連立方程式を解く #########################//
	//##################################################################//
	
	DynamicMatrix<double> a(3, 4);
	
	//=============== 答えがない場合のサンプル =======================//
	////========== 行列aの左辺(変数3つ)を代入する =========//
	//a(0, 0) = 1;	a(0, 1) = 1;	a(0, 2) = 1.0;// 1,1,1
	//a(1, 0) = 3;	a(1, 1) = 1;	a(1, 2) = -3;// 3,1,-3
	//a(2, 0) = 1;	a(2, 1) = -2;	a(2, 2) = 5;// 1,-2,5
	//
	////=========== 連立方程式の右辺を代入する ============//
	//a(0, 3) = 1;
	//a(1, 3) = 5;
	//a(2, 3) = 10;
	

	//========== 行列aの左辺(変数3つ)を代入する =========//
	a(0, 0) = 8;	a(0, 1) = 6;	a(0, 2) = 4;// 8,6,4
	a(1, 0) = 6;	a(1, 1) = 4;	a(1, 2) = 2;// 6,4,2
	a(2, 0) = 4;	a(2, 1) = 2;	a(2, 2) = 1;// 4,2,1

	//=========== 連立方程式の右辺を代入する ============//
	a(0, 3) = 36;
	a(1, 3) = 22;
	a(2, 3) = 12;

	a.Display();
	
	//============= 連立方程式の解を計算する ============//
	Gauss_Elimination(a);
	
	a.Display();
	
	//##################################################################//
	//######################### 逆行列を計算する #######################//
	//##################################################################//

	DynamicMatrix<double> test_inv(3, 6);

	//======= 左半分に，任意の正方行列を代入する ========//
	test_inv(0, 0) = 1;	test_inv(0, 1) = 2;	test_inv(0, 2) = 1;
	test_inv(1, 0) = 2;	test_inv(1, 1) = 1;	test_inv(1, 2) = 0;
	test_inv(2, 0) = 1;	test_inv(2, 1) = 1;	test_inv(2, 2) = 2;

	//========== 右半分に，単位行列を代入する ===========//
	test_inv(0, 3) = 1;	test_inv(0, 4) = 0;	test_inv(0, 5) = 0;
	test_inv(1, 3) = 0;	test_inv(1, 4) = 1;	test_inv(1, 5) = 0;
	test_inv(2, 3) = 0;	test_inv(2, 4) = 0;	test_inv(2, 5) = 1;
	
	test_inv.Display();
//	|  1   2   1  |   1   0   0  |
//  |  2   1   0  |   0   1   0  |
//  |  1   1   2  |   0   0   1  |


	Gauss_Elimination(test_inv);

	test_inv.Display();

	return 0;
}